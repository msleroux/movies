<?php

namespace AppBundle\Repository;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository
{
    public function findWithFilters($selectedGenre = null,$selectedAnneeMin = 1916,$selectedAnneeMax = 2019,$recherche = 'a'){

        $qb = $this->createQueryBuilder('m'); // on est déjà dans Movie, on donne juste l'alias
        $qb
            ->addOrderBy('m.year', 'DESC');

        if($selectedGenre){
            $qb
                ->join('m.genres', 'g')
                ->addSelect('g')
                ->andWhere('g = :genre')
                ->setParameter('genre', $selectedGenre);
        }

        if($selectedAnneeMin){
            $qb
                ->andWhere('m.year >= :anneeMin')
                ->setParameter('anneeMin', $selectedAnneeMin);
        }

        if($selectedAnneeMax){
            $qb
                ->andWhere('m.year <= :anneeMax')
                ->setParameter('anneeMax', $selectedAnneeMax);
        }

        if($recherche){
            $qb
                ->join('m.actors','a')
                ->addSelect('a')
                ->join('m.directors', 'd')
                ->addSelect('d')
                ->join('m.writers','w')
                ->addSelect('w')
                ->andWhere('w.name LIKE :recherche or d.name LIKE :recherche or a.name LIKE :recherche')
                //->orWhere('d.name LIKE :recherche') avec le orWhere, la recherche surpasse le filtre des années
                    // la requete fait where selectedAnnée OR d.name balbla OR a.name
                //->orWhere('a.name LIKE :recherche')
                ->setParameter('recherche', '%'.$recherche.'%');

        }


        $qb->setMaxResults(50);

        $query= $qb->getQuery();



     return $query->getResult();

    }
}
